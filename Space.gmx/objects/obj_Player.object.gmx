<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_LightenParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// CHANGE TILE HOR: X = 1 in rm_Main (background) for mobile

isMoving = false;

image_speed = 0;

start = 0;

turnBegin = 1;  // 1 = Player can move
                // 0 = Enemy's turn

enemyGen = 0;

enemiesWithinRange = 0; // redundant since identical to size of EnemyList

enemyShooting = 0; // 1 = Enemy is currently shooting, cannot move

menuCounter = 15; // amount of frames to hold LMB before menu appears

menuStop = 0; // 0 = Menu inactive, Player can move
              // 1 = Menu currently active, Player cannot move

EnemyList = ds_list_create(); // list of enemies within Player range
                              // combine enemiesWithinRange? = ds_list_size(EnemyList)

path = path_add(); // create new path index to be used

// initial values for pathArray
pathArray[0, 0] = (x/32 - 2);
pathArray[0, 1] = (y/32 - 2);

LineOfSight = scr_Range_Setup(x,y);

// Stats and Mechanics

level = 1;
hp = 10;
max_hp = 10;
xp = 0;

currentWeapon = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (path_exists(path)) {
    path_delete(path);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menuStop = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// once the last fog tile has been placed, generate enemies
if (instance_position(1024, 1024, obj_Fog) &amp;&amp; (enemyGen == 0)) {
    instance_create(0, 0, obj_EnemyGen);
    enemyGen = 1;
}

if (start == 0) {  // original orientation UP
    image_angle = 90;
    // outer border changed from 1 cell width to 2 -&gt; compensate on the mp_grid with (x/32)-2 and (y/32)-2
    // see obj_E1 explanation
    mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2);
}

else { // player orientation = direction
       // CHANGE: This rotates sprite and causes Fog issues.
       // Make "diagonal" sprites instead of setting image_angle
    if ((isMoving == true)) {
        image_angle = direction;
    }
}

if (isMoving == false &amp;&amp; turnBegin == 1 &amp;&amp; enemyShooting == 0 &amp;&amp; !instance_exists(obj_Pulse1)) {
    
    with (obj_E1) {
        shotLimiter = 0;
    }

    if (mouse_check_button_pressed(mb_left)) {
        
        // if clicking on self, do nothing (holding on self covered in another event - opening menu)
        if (mouse_x &gt; bbox_left &amp;&amp; mouse_x &lt; bbox_right &amp;&amp; mouse_y &gt; bbox_top &amp;&amp; mouse_y &lt; bbox_bottom) {
            exit;
        }
        
        // if clicking on a square outside the player's CURRENT vision, do nothing
        // TODO: allow moving to previously explored areas even if outside range (fast-forward until enemy is found)
        clickedFog = instance_position(mouse_x, mouse_y, obj_Fog);
        if (clickedFog.currentVision == 0) {
            exit;
        }
        
        // if clicking on a previously explored tile UNDER a UI element, only do the UI stuff (don't move)
        // this was used for Target Button (removed) but may be useful for other purposes
        else {
            if (instance_position(mouse_x, mouse_y, obj_ParentUI)) {
                exit;
            }
        }
        
        if (menuStop == 1) {
            exit;
        }
        
        mx = (mouse_x + 16 &amp; $ffffffe0);
        my = (mouse_y + 16 &amp; $ffffffe0);
        
        mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2); // clear current cell so player can move
        if (mp_grid_path(obj_PathController.mpGrid, path, x, y, mx, my, true)) { // if a path was created, start path
            
            // clear the list of tiles the player last entered
            pathArray = 0;
            
            isMoving = true;
            sprite_index = spr_Player;
            image_speed = 0.5;
            start = 1;
            
            // get the length (number of points) in the path
            var pathLength = path_get_number(path);
            // for each point, get the mp_grid coordinates and add it to the Player's lastMoved list
            for (var i = 0; i &lt; pathLength; i++) {
                pathArray[i, 0] = (path_get_point_x(path, i)/32 - 2);
                pathArray[i, 1] = (path_get_point_y(path, i)/32 - 2);
                
                if ((i != 0) /*&amp;&amp; (i != pathLength - 1)*/) {
                    instance_create(path_get_point_x(path, i), path_get_point_y(path, i), obj_NodeTracer);
                }
            }
            
            path_start(path, 3, 0, true);
            
        }
        else { // prevents own cell from clearing if clicking on enemy
            mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2); // if finished, add self back into grid
        }   
    }
}
else {
    if (place_meeting(x, y, obj_NodeTracer)) {
        testid = obj_NodeTracer.id;
        LineOfSight = scr_Range_Setup(testid.x, testid.y);
        
        with (testid) {
            instance_destroy();
        }
    }

    if (path_position == 1 &amp;&amp; turnBegin == 1) {
        image_speed = 0;
        if (round(direction) == 225) { // SW
            image_angle = 0;
            sprite_index = spr_PlayerAngle;
            image_index = 0;
        }
        else if (round(direction) == 315) { // SE
            image_angle = 0;
            sprite_index = spr_PlayerAngle;
            image_index = 1;
        }
        else if (round(direction) == 45) { // NE
            image_angle = 0;
            sprite_index = spr_PlayerAngle;
            image_index = 2;
        }
        else if (round(direction) == 135) { // NW
            image_angle = 0;
            sprite_index = spr_PlayerAngle;
            image_index = 3;
        }
        else { // N, E, S, W
            sprite_index = spr_Player;
            image_index = 0;
        }
        
        mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2); // if finished, add self back into grid
        isMoving = false;
        for (i = 0; i &lt; instance_number(obj_E1); i += 1) {  // for each instance of the enemy object
            enemy = instance_find(obj_E1, i);               // get the unique instance id of the enemy
            
            for (var j = 0; j &lt; array_height_2d(LineOfSight); j++) {
            
                if ((((enemy.x/32)-2) == LineOfSight[j, 0]) &amp;&amp; (((enemy.y/32)-2) == LineOfSight[j, 1])){ // if the enemy is within player's range
            
                // if (distance_to_object(enemy) &lt; 64) {           // if the enemy is within player's range
                    if (enemy.EnemyInRange == 1) { // if the enemy instance was already within range
                    
                    }
                    else {  // if the enemy instance came into range after the player moved 
                        enemy.EnemyInRange = 1;      // enemy is now in range
                        
                        // add the enemy to the list
                        needToAdd = ds_list_find_index(EnemyList, enemy);
                        if (needToAdd == -1) { // if the enemy is not already in the EnemyList, add it
                            ds_list_add(EnemyList, enemy);
                            // enemiesWithinRange += 1; redundant as enemiesWithinRange = size of EnemyList
                            // show_message("Player sighted the enemy");
                        }
                    }
                    break;
                }
                else {  // if the enemy instance is not within range (2 cases: was never in range and was in range but player moved away)
                    if (enemy.EnemyInRange == 1) { // enemy instance was in range but left
                        enemy.EnemyInRange = 0;
                        
                        // find the index of the enemy from the list and delete it
                        needToDelete = ds_list_find_index(EnemyList, enemy);
                        if (needToDelete &gt; -1) { // if the enemy still exists in EnemyList
                            ds_list_delete(EnemyList, needToDelete);
                            // enemiesWithinRange -= 1; redundant as enemiesWithinRange = size of EnemyList
                            // show_message("Player moved out of range");
                        }
                    }
                    else { // enemy was never in range, do nothing
    
                    }
                }
            }
        }
        //LineOfSight = scr_Range_Setup(x,y);
        turnBegin = 0;
        obj_TurnController.EnemyCounter = 1;
    }
}

scr_Level_Up(xp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if mouse cursor leaves obj_Player, reset menuCounter
if (menuCounter &gt; 0) {

    with (obj_LoadMenu) {
        instance_destroy();
    }
    
    menuCounter = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if LMB is released before menuCounter reaches 0, reset menuCounter

if (menuCounter &gt; 0) {

    with (obj_LoadMenu) {
        instance_destroy();
    }    

    menuCounter = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_message(string(x/32-2) + "," + string(y/32-2));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isMoving == false) {

    menuCounter -= 1;
    
    if (!instance_exists(obj_MenuExit)) {
        instance_create(x, y, obj_LoadMenu);
    }
    
    // if LMB has been held long enough on obj_Player, load the menu
    if (menuCounter == 0 &amp;&amp; !instance_exists(obj_MenuExit)) {
        
        with (obj_LoadMenu) {
            instance_destroy();
        }
    
        instance_create(x, y-32, obj_MenuExit);
        instance_create(x-32, y-16, obj_MenuStatus);
        instance_create(x+32, y-16, obj_MenuInventory);
        instance_create(x-32, y+16, obj_MenuW1);
        instance_create(x, y+32, obj_MenuW2);
        instance_create(x+32, y+16, obj_MenuW3);
        menuCounter = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
