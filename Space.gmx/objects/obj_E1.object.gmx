<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_E1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isMoving = false;

image_speed = 0;

start = 0;

EnemyInRange = 0;  // 1 when in range of Player

turnBegin = 0; // 1 = Enemy can move
               // 0 = Player can move
               
endTurn = 0;
               
path_E1 = path_add(); // create new path index to be used

shotLimiter = 0;

// this is already done in obj_EnemyGen.Create
// mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1);

// Stats and Mechanics

hp = 3;
max_hp = 3;

range = 12; // there are 12 squares + current square (0-12) within distance of 2 of Enemy
            // corners don't count (check scr_Movement diagram)
            
rangeArray = scr_Range_Setup(x, y);

// Player never starts within range of enemy, so set all initial weights to 0
for (var rangeInc = 0; rangeInc &lt; array_height_2d(rangeArray); rangeInc++) {
    rangeArray[rangeInc, 2] = 0;
}

// setNewReticle = 0; Reticle mechanics removed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (path_exists(path_E1)) {
    path_delete(path_E1);
}

obj_Player.xp += 10;

// mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1);

/*
// Reticle mechanics removed
// when destroyed, if there are still enemies in range, 
// create a new target reticle at the next enemy
if (!ds_list_empty(obj_Player.EnemyList)) {
    var enemy = ds_list_find_value(obj_Player.EnemyList, 0);
    instance_create(enemy.x, enemy.y, obj_TargetReticle);
}
*/

// obj_Player.enemiesWithinRange -= 1; redundant as enemiesWithinRange = size of EnemyList
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
turnBegin = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (start == 0) {
    image_angle = 90;
}
else {
    if (isMoving == true) {
        image_angle = direction;
    }
}

// enemy is visible when in player sight range and invisible when it isn't
currentLocation = instance_position(x, y, obj_Fog);
if (currentLocation.currentVision == 1) {
    visible = 1;
}
else { // enemy is not visible
    visible = 0;
}

if (hp &lt;= 0) {
    // taken from obj_PlayerPulse1.Step
    // remove the enemy from the list of units within player sight
    removeEnemy = ds_list_find_index(obj_Player.EnemyList, id);
    ds_list_delete(obj_Player.EnemyList, removeEnemy);
    
    // remove the enemy from the overall enemy unit turn order
    removeEnemyTurn = ds_list_find_index(obj_TurnController.EnemyTurnList, id);
    ds_list_delete(obj_TurnController.EnemyTurnList, removeEnemyTurn);
    mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2);
    ds_list_add(obj_Player.testTurn, (string(id)+"/end#"))

    turnBegin = 0;
    if (EnemyInRange == 1) {
        obj_TurnController.incETL += 1;
        
    }
    instance_destroy();
}

// Movement AI
if (isMoving == false &amp;&amp; turnBegin == 1) {
    
    ds_list_add(obj_Player.testTurn, (string(id)+"/start#"))

    weightArray = scr_EnemyPath(rangeArray, obj_Player.pathArray);
    newCoord = scr_Weighted_Move(weightArray);

    // if the Player is in range of enemy, shoot and end turn
    if (EnemyInRange == 1) {
        if (shotLimiter == 0) {
            obj_Player.enemyShooting = 1;
            shotLimiter = 1;
            shot = instance_create(x, y, obj_Pulse1);
        }
        ds_list_add(obj_Player.testTurn, (string(id)+"/end#"))

        turnBegin = 0;
        obj_TurnController.incETL += 1;
    }
    // if the Player is not in range of enemy, complete movement
    else {
        // old: mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1);
        // after extending the outer border from 1 to 2 cells, shift mp_grid operations by 2 to compensate
        mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2); // clear current cell so enemy can move
        if (mp_grid_path(obj_PathController.mpGrid, path_E1, x, y, ((newCoord[0]+2)*32), ((newCoord[1]+2)*32), true)) { // if a path was created, start path        
        
            if ((x == ((newCoord[0]+2)*32)) &amp;&amp; (y = ((newCoord[1]+2)*32))) { // if enemy decides not to move (or cannot move)
                // if a Player moved out of range and scr_Weighted_Move returned a coordinate with the same current location,
                // which would occur if the enemy was supposed to follow the Player but was blocked by another enemy
                mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2);
                ds_list_add(obj_Player.testTurn, (string(id)+"/end#"))
                
                turnBegin = 0;
                
                if (EnemyInRange == 1) {
                    obj_TurnController.incETL += 1;
                }
                
            }
            else { // if enemy moves to a different location
                
                isMoving = true;
                image_speed = 0.5;
                start = 1;
                path_start(path_E1, 3, 0, true);
            }
            
        }
        else { // prevents own cell from clearing if clicking on enemy (check if needed for Enemy paths)
            mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2); // if finished, add self back into grid
        }
    } 
}
else {
    if (path_position == 1 &amp;&amp; turnBegin == 1) {
    
        // refresh Range 
        rangeArray = scr_Range_Setup(x, y);
    
        image_speed = 0;
        if (round(direction) == 225) { // SW
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 0;
        }
        else if (round(direction) == 315) { // SE
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 1;
        }
        else if (round(direction) == 45) { // NE
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 2;
        }
        else if (round(direction) == 135) { // NW
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 3;
        }
        else { // N, E, S, W
            sprite_index = spr_E1;
            image_index = 0;
        }
        
        mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-2, (y/32)-2); // if finished, add self back into grid
        isMoving = false;
        
        for (var j = 0; j &lt; array_height_2d(rangeArray); j++) {
        
            if ((((obj_Player.x/32)-2) == rangeArray[j, 0]) &amp;&amp; (((obj_Player.y/32)-2) == rangeArray[j, 1])){ // after enemy moved, player is in range
                
                EnemyInRange = 1;      // enemy is now in range of Player
                
                // add the enemy to the list
                needToAdd = ds_list_find_index(obj_Player.EnemyList, id);
                if (needToAdd == -1) { // if the enemy is not already in the EnemyList, add it
                    ds_list_add(obj_Player.EnemyList, id);
                }
                break;
            }
            else { // after enemy moved, player is out of range
                
                EnemyInRange = 0;
                
                // find the index of the enemy from the list and delete it
                needToDelete = ds_list_find_index(obj_Player.EnemyList, id)
                if (needToDelete &gt; -1) { // if the enemy still exists in EnemyList, delete it
                    ds_list_delete(obj_Player.EnemyList, needToDelete);
                }
            }
        }
        // refresh weights
        weightArray = scr_EnemyPath(rangeArray, obj_Player.pathArray);
        ds_list_add(obj_Player.testTurn, (string(id)+"/end#"))
        turnBegin = 0;
        
        if (EnemyInRange == 1) {
            obj_TurnController.incETL += 1;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_message("going to " + string(newCoord[0]) + "," + string(newCoord[1]) + ", weight: " + string(newCoord[2]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// only allow player to left-click on enemy when it's his turn
if (obj_Player.turnBegin == 1) &amp;&amp; (EnemyInRange == 1) {
    
    // implement shooting with current weapon
    scr_Player_Shoot(obj_Player.currentWeapon);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var percentage;
percentage = (hp/max_hp) * 100;
if (percentage &lt; 100) {
    draw_healthbar(x-14, y-16, x+14, y-14, percentage, c_black, c_red, c_lime, 0, true, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
