<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_E1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isMoving = false;

image_speed = 0;

start = 0;

EnemyInRange = 0;
PlayerInRange = 0;

turnBegin = 0; // 1 = Enemy can move
               // 0 = Player can move

path_E1 = path_add(); // create new path index to be used

mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1);

// Stats and Mechanics

hp = 3;
max_hp = 3;

range = 12; // there are 12 squares + current square (0-12) within distance of 2 of Enemy
            // corners don't count (check scr_Movement diagram)
           
setNewReticle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (path_exists(path_E1)) {
    path_delete(path_E1);
}

mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1);

// when destroyed, if there are still enemies in range, 
// create a new target reticle at the next enemy
if (!ds_list_empty(obj_Player.EnemyList)) {
    var enemy = ds_list_find_value(obj_Player.EnemyList, 0);
    instance_create(enemy.x, enemy.y, obj_TargetReticle);
}

obj_Player.enemiesWithinRange -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (start == 0) {
    image_angle = 90;
}
else {
    if (isMoving == true) {
        image_angle = direction;
    }
}

// enemy is visible when in player sight range and invisible when it isn't
currentLocation = instance_position(x, y, obj_Fog);
if (currentLocation.currentVision == 1) {
    visible = 1;
}
else { // enemy is not visible
    visible = 0;
}

if (hp &lt;= 0) {
    
    /*
    // taken from obj_PlayerPulse1.Step
    // remove the enemy from the list
    removeEnemy = ds_list_find_index(obj_Player.EnemyList, aim);
    ds_list_delete(obj_Player.EnemyList, removeEnemy);
    
    // increment the EnemyList index by 1
    if (obj_TargetButton.increment == removeEnemy) {
        obj_TargetButton.increment += 1
    }
    */

    instance_destroy();
}

// Movement AI
if (isMoving == false &amp;&amp; turnBegin == 1) {
    // add IF clause for when Player is within range later
    
    // declare and set targetx and targety as the coordinates where the enemy will go
    // use script to see if that square is empty
    TargetArray = scr_Movement(range);
    
    mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1); // clear current cell so enemy can move
    if (mp_grid_path(obj_PathController.mpGrid, path_E1, x, y, (TargetArray[0]), (TargetArray[1]), true)) { // if a path was created, start path        
    
        if ((x == TargetArray[0]) &amp;&amp; (y = TargetArray[1])) { // if enemy decides not to move (or cannot move), check to shoot
            // do a check if Player is within range -&gt; if so, shoot
            mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1);
            turnBegin = 0;
            obj_Player.turnBegin = 1;
        }
        else {
            if (instance_position(x, y, obj_TargetReticle)) { // if that enemy instance was in the reticle
                setNewReticle = 1;
            }
        
            isMoving = true;
            image_speed = 0.5;
            start = 1;
            path_start(path_E1, 3, 0, true);
        }
        
    }
    else { // prevents own cell from clearing if clicking on enemy (check if needed for Enemy paths)
        mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1); // if finished, add self back into grid   
    } 
}
else {
    if (path_position == 1 &amp;&amp; turnBegin == 1) {
        image_speed = 0;
        if (round(direction) == 225) { // SW
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 0;
        }
        else if (round(direction) == 315) { // SE
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 1;
        }
        else if (round(direction) == 45) { // NE
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 2;
        }
        else if (round(direction) == 135) { // NW
            image_angle = 0;
            sprite_index = spr_E1Angle;
            image_index = 3;
        }
        else { // N, E, S, W
            sprite_index = spr_E1;
            image_index = 0;
        }
        
        mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1); // if finished, add self back into grid
        isMoving = false;
        
        if (setNewReticle == 1) {
            instance_create(TargetArray[0], TargetArray[1], obj_TargetReticle);
            setNewReticle = 0;
        }
        
        if (distance_to_object(obj_Player) &lt; 64) { // after enemy moved, player is in range
                
            if (!instance_exists(obj_TargetButton)) {
                targetButton = instance_create(view_xview+615, view_yview+50, obj_TargetButton);
                weaponBox1 = instance_create(view_xview+590, view_yview+120, obj_W1);
                weaponBox2 = instance_create(view_xview+590, view_yview+160, obj_W2);
                weaponBox3 = instance_create(view_xview+590, view_yview+200, obj_W3);
                instance_create(x, y, obj_TargetReticle);
            }
            EnemyInRange = 1;      // enemy is now in range
            
            // add the enemy to the list
            needToAdd = ds_list_find_index(obj_Player.EnemyList, id);
            if (needToAdd == -1) { // if the enemy is not already in the EnemyList, add it
                ds_list_add(obj_Player.EnemyList, id);
                obj_Player.enemiesWithinRange += 1;
                show_message("addedByEnemy");
                obj_TargetButton.increment += 1;
            }
        }
        else { // after enemy moved, player is out of range

            EnemyInRange = 0;
            // find the index of the enemy from the list and delete it
            needToDelete = ds_list_find_index(obj_Player.EnemyList, id)
            if (needToDelete &gt; -1) { // if the enemy still exists in EnemyList, delete it
                ds_list_delete(obj_Player.EnemyList, needToDelete);
                obj_Player.enemiesWithinRange -= 1;
                show_message("deletedByEnemy");
                if (obj_TargetButton.increment == id) {
                    obj_TargetButton.increment += 1;
                }
            }
        }
        turnBegin = 0;
        obj_Player.turnBegin = 1;
    }
}

// only remove the TargetButton if there are NO enemies remaining in range
if (obj_Player.enemiesWithinRange == 0) {
    if (instance_exists(obj_TargetButton)) { // TargetButton only exists if a target was in range
        with (obj_TargetButton) {                // so if the target is out of range, destroy the button
            instance_destroy();
        }
        with (obj_W1) {                // so if the target is out of range, destroy the button
            instance_destroy();
        }
        with (obj_W2) {                // so if the target is out of range, destroy the button
            instance_destroy();
        }
        with (obj_W3) {                // so if the target is out of range, destroy the button
            instance_destroy();
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// only allow player to left-click on enemy when it's his turn
if (obj_Player.turnBegin == 1) {

    // if the enemy doesn't have a reticle on them, 
    // destroy the current reticle and create a new one at the current enemy
    if (!instance_position(x, y, obj_TargetReticle)) {
    
        with (obj_TargetReticle) {
            instance_destroy();
        }
        
        instance_create(x, y, obj_TargetReticle);
        
        // set the index increment of EnemyList to the currently clicked enemy
        obj_TargetButton.increment = ds_list_find_index(obj_Player.EnemyList, id);
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var percentage;
percentage = (hp/max_hp) * 100;
if (percentage &lt; 100) {
    draw_healthbar(x-14, y-16, x+14, y-14, percentage, c_black, c_red, c_lime, 0, true, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
