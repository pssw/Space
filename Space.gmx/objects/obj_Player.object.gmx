<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_LightenParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isMoving = false;

image_speed = 0;

start = 0;

turnBegin = 1;  // 1 = Player can move
                // 0 = Enemy's turn

enemyGen = 0;

enemiesWithinRange = 0;

EnemyList = ds_list_create();  

path = path_add(); // create new path index to be used
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_delete(path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// once the last fog tile has been placed, generate enemies
if (instance_position(1024, 1024, obj_Fog) &amp;&amp; (enemyGen == 0)) {
    instance_create(0, 0, obj_EnemyGen);
    enemyGen = 1;
    //show_message("random enemies generated");
}


if (start == 0) {  // original orientation UP
    image_angle = 90;
}
else { // player orientation = direction
    if (isMoving == true) {
        image_angle = direction;
    }
}
    
if (isMoving == false &amp;&amp; turnBegin == 1) {

    if (mouse_check_button_pressed(mb_left)) {
    
        // if clicking on the square that the player is occupying, do nothing
        if (mouse_x &gt; bbox_left &amp;&amp; mouse_x &lt; bbox_right &amp;&amp; mouse_y &gt; bbox_top &amp;&amp; mouse_y &lt; bbox_bottom) {
            exit;
        }
        
        // if clicking on a square outside the player's CURRENT vision, do nothing
        clickedFog = instance_position(mouse_x, mouse_y, obj_Fog);
        if (clickedFog.currentVision == 0) {
            exit;
        }
        
        mx = (mouse_x + 16 &amp; $ffffffe0);
        my = (mouse_y + 16 &amp; $ffffffe0);
        
        mp_grid_clear_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1); // clear current cell so player can move
        if (mp_grid_path(obj_PathController.mpGrid, path, x, y, mx, my, true)) { // if a path was created, start path
            isMoving = true;
            image_speed = 0.5;
            start = 1;
            path_start(path, 3, 0, true);
        }
        else { // prevents own cell from clearing if clicking on enemy
            mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1); // if finished, add self back into grid
        }   
    }
}

else {
    if (path_position == 1) {
        image_speed = 0;
        image_index = 0;
        
        mp_grid_add_cell(obj_PathController.mpGrid, (x/32)-1, (y/32)-1); // if finished, add self back into grid
        isMoving = false;
        
        for (i = 0; i &lt; instance_number(obj_E1); i += 1) {  // for each instance of the enemy object
            enemy = instance_find(obj_E1, i);               // get the unique instance id of the enemy
            if (distance_to_object(enemy) &lt; 64) {
                if (enemy.EnemyInRange == 1) { // if the enemy instance was already within range, do nothing
                    
                }
                else {  // if the enemy instance came into range after the player moved
                    targetButton = instance_create(view_xview+615, view_yview+50, obj_TargetButton);
                    enemy.EnemyInRange = 1;      // enemy is now in range
                    enemiesWithinRange += 1;
                    
                    // add the enemy to the list
                    ds_list_add(EnemyList, enemy);
                    
                    obj_TargetButton.increment += 1;
                    
                }
            }
            else {  // if the enemy instance is not within range (2 cases: was never in range and was in range but left)
                if (enemy.EnemyInRange == 1) { // enemy instance was in range but left
                    enemy.EnemyInRange = 0;
                    enemiesWithinRange -= 1;
                    //test2 = string(enemy) + " left range";
                    //show_message(test2);
                    
                    // find the index of the enemy from the list and delete it
                    enemyIndex = ds_list_find_index(EnemyList, enemy);
                    ds_list_delete(EnemyList, enemyIndex);
                    
                    if (obj_TargetButton.increment == enemyIndex) {
                        obj_TargetButton.increment += 1
                    }
                    
                }
                else { // enemy was never in range, do nothing

                }
                
            }
        }
        // only remove the TargetButton if there are NO enemies remaining in range
        if (enemiesWithinRange == 0) {
            if (instance_exists(obj_TargetButton)) { // TargetButton only exists if a target was in range
                with (obj_TargetButton) {                // so if the target is out of range, destroy the button
                    instance_destroy();
                }
            }
        }
        //turnBegin = 0; // set to 1 again after all enemies have gone
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>total = "";

for (i = 0; i &lt; ds_list_size(EnemyList); i += 1) {
    total += string(ds_list_find_value(EnemyList, i)) + ", ";
}

show_message(total);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
