<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>EnemyTurnList = ds_list_create();

inRangeList = ds_list_create();
outofRangeList = ds_list_create();

listSorted = 0; // checks whether ETL has been separated into iRL and ooRL
incETL = 0;
EnemyCounter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// When EnemyCounter is 1, iterate through the array of total enemies
// and let each enemy do their action.
// Set EnemyCounter to 0 and the player's turnBegin to 1.

if (EnemyCounter == 1) {    
    
    // we only want to sort the enemies into separate lists ONCE per turn
    if (listSorted == 0) {
        listSorted = 1;
        // separate ETL into 2 lists: one for enemies in range and out for enemies out of range
        for (var i = 0; i &lt; ds_list_size(EnemyTurnList); i++) {
            if ((ds_list_find_value(EnemyTurnList, i).EnemyInRange == 1)) {
                ds_list_add(inRangeList, ds_list_find_value(EnemyTurnList, i));
            }
            else {
                ds_list_add(outofRangeList, ds_list_find_value(EnemyTurnList, i));
            }
        }  
        numEnemyInRange = ds_list_size(inRangeList);
        numEnemyOutOfRange = ds_list_size(outofRangeList);
    }
    // if enemies are in range, activate their movement first
    if (!ds_list_empty(inRangeList)) {
        if (incETL &lt; numEnemyInRange) {
            currentEnemy = ds_list_find_value(inRangeList, incETL);
            if (instance_exists(currentEnemy)) {
                if (currentEnemy.turnBegin == 0) {
                    currentEnemy.turnBegin = 1;
                }
            }
            else {
                show_message("dead");
            }
        }
        // reach here when all enemies within range have been activated
        // incETL = numEnemyInRange
        else {
            // activate enemies in ooRList
            if (!ds_list_empty(outofRangeList)) {
                for (var m = 0; m &lt; numEnemyOutOfRange; m++) {
                    currentEnemy = ds_list_find_value(outofRangeList, m);
                    if (currentEnemy.turnBegin &lt; 1) {
                        currentEnemy.turnBegin = 1;
                    }
                }
                listSorted = 0;
                incETL = 0;
                EnemyCounter = 0;
                ds_list_clear(outofRangeList);
                ds_list_clear(inRangeList);
                obj_Player.turnBegin = 1;
            }
            // should be finished both enemies in iRList and ooRList
            else {
                listSorted = 0;
                incETL = 0;
                EnemyCounter = 0;
                ds_list_clear(outofRangeList);
                ds_list_clear(inRangeList);
                obj_Player.turnBegin = 1;
            }
        }
    }
    // no enemies are in range, do a quick iterate over enemies in ooRList
    else {
        for (var j = 0; j &lt; numEnemyOutOfRange; j++) {
            currentEnemy = ds_list_find_value(outofRangeList, j);
            
            if (currentEnemy.turnBegin &lt; 1) {
                currentEnemy.turnBegin = 1;
            }
        }
        listSorted = 0;
        incETL = 0;
        EnemyCounter = 0;
        ds_list_clear(outofRangeList);
        ds_list_clear(inRangeList);
        obj_Player.turnBegin = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
